// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  password  String
  carrinhos Carrinho[]

  HistoricoPedido HistoricoPedido[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  category    String   @default("Sem Categoria")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  CarrinhoItem CarrinhoItem[]

  HistoricoPedidoItem HistoricoPedidoItem[]
}

model Carrinho {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  items     CarrinhoItem[]

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model CarrinhoItem {
  id         Int      @id @default(autoincrement())
  quantity   Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  carrinho   Carrinho @relation(fields: [carrinhoId], references: [id])
  carrinhoId Int

  @@unique([carrinhoId, productId])
}

model HistoricoPedido {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  total        Float
  pagamento    String        // Ex: 'cartao', 'pix', 'boleto'
  status       String        @default("finalizado") // ou "em processamento", etc.
  
  user         User          @relation(fields: [userId], references: [id])
  userId       Int

  itens        HistoricoPedidoItem[]
}

model HistoricoPedidoItem {
  id           Int          @id @default(autoincrement())
  quantidade   Int
  precoUnit    Float

  pedido       HistoricoPedido      @relation(fields: [pedidoId], references: [id])
  pedidoId     Int

  product      Product      @relation(fields: [productId], references: [id])
  productId    Int
}
